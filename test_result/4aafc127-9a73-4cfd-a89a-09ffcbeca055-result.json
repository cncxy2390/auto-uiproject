{"name": "test_stock_short", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a id=\"join_cart\" class=\"addcar buy_button\" href=\"javascript:;\" style=\"\">...</a> is not clickable at point (874, 615). Other element would receive the click: <iframe scrolling=\"auto\" allowtransparency=\"true\" id=\"layui-layer-iframe1\" name=\"layui-layer-iframe1\" onload=\"this.className='';\" class=\"\" frameborder=\"0\" src=\"/index.php?m=Home&amp;c=Goods&amp;a=open_add_cart\" style=\"height: 343px;\" cd_frame_id_=\"c9805fa36fdad952de88bdf7a0cf83d1\"></iframe>\n  (Session info: chrome=102.0.5005.63)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00A5D953+2414931]\n\tOrdinal0 [0x009EF5E1+1963489]\n\tOrdinal0 [0x008DC6B8+837304]\n\tOrdinal0 [0x0090FC27+1047591]\n\tOrdinal0 [0x0090DC08+1039368]\n\tOrdinal0 [0x0090B90B+1030411]\n\tOrdinal0 [0x0090A659+1025625]\n\tOrdinal0 [0x00900293+983699]\n\tOrdinal0 [0x0092449C+1131676]\n\tOrdinal0 [0x008FFC74+982132]\n\tOrdinal0 [0x009246B4+1132212]\n\tOrdinal0 [0x00934812+1198098]\n\tOrdinal0 [0x009242B6+1131190]\n\tOrdinal0 [0x008FE860+976992]\n\tOrdinal0 [0x008FF756+980822]\n\tGetHandleVerifier [0x00CCCC62+2510274]\n\tGetHandleVerifier [0x00CBF760+2455744]\n\tGetHandleVerifier [0x00AEEABA+551962]\n\tGetHandleVerifier [0x00AED916+547446]\n\tOrdinal0 [0x009F5F3B+1990459]\n\tOrdinal0 [0x009FA898+2009240]\n\tOrdinal0 [0x009FA985+2009477]\n\tOrdinal0 [0x00A03AD1+2046673]\n\tBaseThreadInitThunk [0x75CC6739+25]\n\tRtlGetFullPathName_UEx [0x774C8FEF+1215]\n\tRtlGetFullPathName_UEx [0x774C8FBD+1165]", "trace": "self = <testcase.test_product_details.TestProductDetails object at 0x000002DB1EDF9A80>\nget_pd = <business.shopping_business.ShoppingBusiness object at 0x000002DB1EE3A710>\nget_logger = <common.logger.Logger object at 0x000002DB1EE9EB30>\nget_clear_cart = <common.read_datas.ReadDatas object at 0x000002DB1EE3B760>\n\n    @allure.story('购买商品库存不足')\n    def test_stock_short(self, get_pd, get_logger, get_clear_cart):\n        res = get_clear_cart.read_database(falg='one', sql=\"select store_count from tp_goods where goods_name = 'TPshop 努比亚 nubia X 双面屏 蓝金梵高 星空典藏版 8GB+512GB 全网通 移动联通电信4G手机 双卡双待'\")\n        res = res[0]['store_count']\n        expected = f'商品库存不足，剩余{res}'\n        get_pd.ash.asp.bs.driver.get('http://tpshop.cn/Home/Goods/goodsInfo/id/237')\n>       actual = get_pd.stock_short()\n\ntestcase\\test_product_details.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbusiness\\shopping_business.py:54: in stock_short\n    self.ash.click_cart()\nhandle\\add_shopping_handle.py:31: in click_cart\n    return self.asp.get_add_cart()\npage\\add_shopping_page.py:46: in get_add_cart\n    res = self.bs.driver.find_element(by=By.ID, value='join_cart').click()\n..\\..\\..\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:81: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:740: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:430: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002DB1EE39180>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...unk [0x75CC6739+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x774C8FEF+1215]\\\\n\\\\tRtlGetFullPathName_UEx [0x774C8FBD+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a id=\"join_cart\" class=\"addcar buy_button\" href=\"javascript:;\" style=\"\">...</a> is not clickable at point (874, 615). Other element would receive the click: <iframe scrolling=\"auto\" allowtransparency=\"true\" id=\"layui-layer-iframe1\" name=\"layui-layer-iframe1\" onload=\"this.className='';\" class=\"\" frameborder=\"0\" src=\"/index.php?m=Home&amp;c=Goods&amp;a=open_add_cart\" style=\"height: 343px;\" cd_frame_id_=\"c9805fa36fdad952de88bdf7a0cf83d1\"></iframe>\nE         (Session info: chrome=102.0.5005.63)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00A5D953+2414931]\nE       \tOrdinal0 [0x009EF5E1+1963489]\nE       \tOrdinal0 [0x008DC6B8+837304]\nE       \tOrdinal0 [0x0090FC27+1047591]\nE       \tOrdinal0 [0x0090DC08+1039368]\nE       \tOrdinal0 [0x0090B90B+1030411]\nE       \tOrdinal0 [0x0090A659+1025625]\nE       \tOrdinal0 [0x00900293+983699]\nE       \tOrdinal0 [0x0092449C+1131676]\nE       \tOrdinal0 [0x008FFC74+982132]\nE       \tOrdinal0 [0x009246B4+1132212]\nE       \tOrdinal0 [0x00934812+1198098]\nE       \tOrdinal0 [0x009242B6+1131190]\nE       \tOrdinal0 [0x008FE860+976992]\nE       \tOrdinal0 [0x008FF756+980822]\nE       \tGetHandleVerifier [0x00CCCC62+2510274]\nE       \tGetHandleVerifier [0x00CBF760+2455744]\nE       \tGetHandleVerifier [0x00AEEABA+551962]\nE       \tGetHandleVerifier [0x00AED916+547446]\nE       \tOrdinal0 [0x009F5F3B+1990459]\nE       \tOrdinal0 [0x009FA898+2009240]\nE       \tOrdinal0 [0x009FA985+2009477]\nE       \tOrdinal0 [0x00A03AD1+2046673]\nE       \tBaseThreadInitThunk [0x75CC6739+25]\nE       \tRtlGetFullPathName_UEx [0x774C8FEF+1215]\nE       \tRtlGetFullPathName_UEx [0x774C8FBD+1165]\n\n..\\..\\..\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "0bbf05dd-6c49-482d-bfbf-8f1f85a370fa-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "7cd42da2-ce21-407e-a7e7-6559cadd2b23-attachment.txt", "type": "text/plain"}], "start": 1654262014138, "stop": 1654262018235, "uuid": "dbfb218c-88c8-4ab9-8d65-a879e1a3c73e", "historyId": "d47121b3d045eb73e9f1dea10c84e9ac", "testCaseId": "542f49b348b6e93fbab79c4d85b9b9be", "fullName": "testcase.test_product_details.TestProductDetails#test_stock_short", "labels": [{"name": "feature", "value": "商品详情"}, {"name": "story", "value": "购买商品库存不足"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_product_details"}, {"name": "subSuite", "value": "TestProductDetails"}, {"name": "host", "value": "LAPTOP-5JV5AA6V"}, {"name": "thread", "value": "20712-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_product_details"}]}